# ********RoostGPT********
"""
Test generated by RoostGPT for test pythonunittesting1 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=calc_profit_b5630eec64
ROOST_METHOD_SIG_HASH=calc_profit_d387a7f844


Scenario 1: Test with valid inputs where max_weight is less than the total available weight.
Details:
  TestName: test_calc_profit_valid_input_max_weight_less_than_total_weight
  Description: This test verifies that the function correctly calculates the maximum profit when the maximum weight is less than the total available weight.
Execution:
  Arrange: Prepare profits, weights and max_weight where max_weight is less than the total available weight.
  Act: Call the function calc_profit with the prepared inputs.
  Assert: Check that the result matches the expected maximum profit.
Validation:
  This test ensures that the function correctly handles a common scenario and returns the correct maximum profit. The result is vital as it directly impacts the business's profit calculation.

Scenario 2: Test with valid inputs where max_weight is equal to the total available weight.
Details:
  TestName: test_calc_profit_valid_input_max_weight_equal_to_total_weight
  Description: This test verifies that the function correctly calculates the maximum profit when the maximum weight is equal to the total available weight.
Execution:
  Arrange: Prepare profits, weights and max_weight where max_weight is equal to the total available weight.
  Act: Call the function calc_profit with the prepared inputs.
  Assert: Check that the result matches the expected maximum profit.
Validation:
  This test ensures that the function correctly handles the scenario where the maximum weight is exactly the total available weight. The result is essential as it confirms the function's ability to accurately calculate the maximum profit.

Scenario 3: Test with profit and weight lists of unequal lengths.
Details:
  TestName: test_calc_profit_unequal_length_profit_weight
  Description: This test verifies that the function raises an error when the profit and weight lists are of unequal lengths.
Execution:
  Arrange: Prepare profits and weights lists of unequal lengths.
  Act: Call the function calc_profit with the prepared inputs.
  Assert: Check that a ValueError is raised.
Validation:
  This test ensures that the function correctly checks for equal lengths of profit and weight lists and raises an error if they are unequal. This error handling is crucial for the function's robustness.

Scenario 4: Test with negative values in the profit list.
Details:
  TestName: test_calc_profit_negative_profit
  Description: This test verifies that the function raises an error when there are negative values in the profit list.
Execution:
  Arrange: Prepare a profits list that includes negative values.
  Act: Call the function calc_profit with the prepared inputs.
  Assert: Check that a ValueError is raised.
Validation:
  This test ensures that the function correctly checks for negative values in the profit list and raises an error if found. This error handling is important for data integrity and accurate profit calculation.

Scenario 5: Test with negative values in the weight list.
Details:
  TestName: test_calc_profit_negative_weight
  Description: This test verifies that the function raises an error when there are negative values in the weight list.
Execution:
  Arrange: Prepare a weights list that includes negative values.
  Act: Call the function calc_profit with the prepared inputs.
  Assert: Check that a ValueError is raised.
Validation:
  This test ensures that the function correctly checks for negative values in the weight list and raises an error if found. This error handling is crucial for data integrity and accurate weight calculation.

Scenario 6: Test with max_weight less than or equal to zero.
Details:
  TestName: test_calc_profit_non_positive_max_weight
  Description: This test verifies that the function raises an error when max_weight is less than or equal to zero.
Execution:
  Arrange: Prepare a max_weight that is less than or equal to zero.
  Act: Call the function calc_profit with the prepared inputs.
  Assert: Check that a ValueError is raised.
Validation:
  This test ensures that the function correctly checks for non-positive max_weight and raises an error if found. This error handling is important to avoid incorrect calculations and ensure the function's robustness.
"""

# ********RoostGPT********
import pytest
from knapsack.greedy_knapsack import calc_profit

class Test_GreedyKnapsackCalcProfit:

    def test_calc_profit_valid_input_max_weight_less_than_total_weight(self):
        profit = [5, 8, 7, 1, 12, 3, 4]
        weight = [2, 7, 1, 6, 4, 2, 5]
        max_weight = 15
        expected_profit = 29.0
        assert calc_profit(profit, weight, max_weight) == expected_profit

    def test_calc_profit_valid_input_max_weight_equal_to_total_weight(self):
        profit = [5, 8, 7, 1, 12, 3, 4]
        weight = [2, 7, 1, 6, 4, 2, 5]
        max_weight = 27
        expected_profit = 40.0
        assert calc_profit(profit, weight, max_weight) == expected_profit

    def test_calc_profit_unequal_length_profit_weight(self):
        profit = [5, 8, 7, 1, 12, 3]
        weight = [2, 7, 1, 6, 4, 2, 5]
        max_weight = 100
        with pytest.raises(ValueError):
            calc_profit(profit, weight, max_weight)

    def test_calc_profit_negative_profit(self):
        profit = [5, -8, 7, 1, 12, 3, 4]
        weight = [2, 7, 1, 6, 4, 2, 5]
        max_weight = 100
        with pytest.raises(ValueError):
            calc_profit(profit, weight, max_weight)

    def test_calc_profit_negative_weight(self):
        profit = [5, 8, 7, 1, 12, 3, 4]
        weight = [2, -7, 1, 6, 4, 2, 5]
        max_weight = 100
        with pytest.raises(ValueError):
            calc_profit(profit, weight, max_weight)

    def test_calc_profit_non_positive_max_weight(self):
        profit = [5, 8, 7, 1, 12, 3, 4]
        weight = [2, 7, 1, 6, 4, 2, 5]
        max_weight = 0
        with pytest.raises(ValueError):
            calc_profit(profit, weight, max_weight)
